use core::sync::atomic::Ordering;

use cramium_hal::usb::driver::CorigineUsb;
use cramium_hal::usb::driver::*;

use super::*;

// MBR template
// 0x0b~0x0C 2 bytes means block size, default 0x200 bytes
// 0x20~0x23 4 bytes means block number, default 0x400 block
#[rustfmt::skip] // keep this in 16-byte width
pub(crate) const MBR_TEMPLATE: [u8; 512] = [
    0xEB, 0x3C, 0x90, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x35, 0x2E, 0x30, 0x00, 0x02, 0x20, 0x01, 0x00,
    0x02, 0x00, 0x02, 0x00, 0x00, 0xF8, 0x00, 0x01, 0x3f, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x80, 0x00, 0x29, 0x72, 0x1a, 0x65, 0xA4, 0x4E, 0x4F, 0x20, 0x4E, 0x41,
    0x4D, 0x45, 0x20, 0x20, 0x20, 0x20, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x33, 0xC9,
    0x8E, 0xD1, 0xBC, 0xF0, 0x7B, 0x8E, 0xD9, 0xB8, 0x00, 0x20, 0x8E, 0xC0, 0xFC, 0xBD, 0x00, 0x7C,
    0x38, 0x4E, 0x24, 0x7D, 0x24, 0x8B, 0xC1, 0x99, 0xE8, 0x3C, 0x01, 0x72, 0x1C, 0x83, 0xEB, 0x3A,
    0x66, 0xA1, 0x1C, 0x7C, 0x26, 0x66, 0x3B, 0x07, 0x26, 0x8A, 0x57, 0xFC, 0x75, 0x06, 0x80, 0xCA,
    0x02, 0x88, 0x56, 0x02, 0x80, 0xC3, 0x10, 0x73, 0xEB, 0x33, 0xC9, 0x8A, 0x46, 0x10, 0x98, 0xF7,
    0x66, 0x16, 0x03, 0x46, 0x1C, 0x13, 0x56, 0x1E, 0x03, 0x46, 0x0E, 0x13, 0xD1, 0x8B, 0x76, 0x11,
    0x60, 0x89, 0x46, 0xFC, 0x89, 0x56, 0xFE, 0xB8, 0x20, 0x00, 0xF7, 0xE6, 0x8B, 0x5E, 0x0B, 0x03,
    0xC3, 0x48, 0xF7, 0xF3, 0x01, 0x46, 0xFC, 0x11, 0x4E, 0xFE, 0x61, 0xBF, 0x00, 0x00, 0xE8, 0xE6,
    0x00, 0x72, 0x39, 0x26, 0x38, 0x2D, 0x74, 0x17, 0x60, 0xB1, 0x0B, 0xBE, 0xA1, 0x7D, 0xF3, 0xA6,
    0x61, 0x74, 0x32, 0x4E, 0x74, 0x09, 0x83, 0xC7, 0x20, 0x3B, 0xFB, 0x72, 0xE6, 0xEB, 0xDC, 0xA0,
    0xFB, 0x7D, 0xB4, 0x7D, 0x8B, 0xF0, 0xAC, 0x98, 0x40, 0x74, 0x0C, 0x48, 0x74, 0x13, 0xB4, 0x0E,
    0xBB, 0x07, 0x00, 0xCD, 0x10, 0xEB, 0xEF, 0xA0, 0xFD, 0x7D, 0xEB, 0xE6, 0xA0, 0xFC, 0x7D, 0xEB,
    0xE1, 0xCD, 0x16, 0xCD, 0x19, 0x26, 0x8B, 0x55, 0x1A, 0x52, 0xB0, 0x01, 0xBB, 0x00, 0x00, 0xE8,
    0x3B, 0x00, 0x72, 0xE8, 0x5B, 0x8A, 0x56, 0x24, 0xBE, 0x0B, 0x7C, 0x8B, 0xFC, 0xC7, 0x46, 0xF0,
    0x3D, 0x7D, 0xC7, 0x46, 0xF4, 0x29, 0x7D, 0x8C, 0xD9, 0x89, 0x4E, 0xF2, 0x89, 0x4E, 0xF6, 0xC6,
    0x06, 0x96, 0x7D, 0xCB, 0xEA, 0x03, 0x00, 0x00, 0x20, 0x0F, 0xB6, 0xC8, 0x66, 0x8B, 0x46, 0xF8,
    0x66, 0x03, 0x46, 0x1C, 0x66, 0x8B, 0xD0, 0x66, 0xC1, 0xEA, 0x10, 0xEB, 0x5E, 0x0F, 0xB6, 0xC8,
    0x4A, 0x4A, 0x8A, 0x46, 0x0D, 0x32, 0xE4, 0xF7, 0xE2, 0x03, 0x46, 0xFC, 0x13, 0x56, 0xFE, 0xEB,
    0x4A, 0x52, 0x50, 0x06, 0x53, 0x6A, 0x01, 0x6A, 0x10, 0x91, 0x8B, 0x46, 0x18, 0x96, 0x92, 0x33,
    0xD2, 0xF7, 0xF6, 0x91, 0xF7, 0xF6, 0x42, 0x87, 0xCA, 0xF7, 0x76, 0x1A, 0x8A, 0xF2, 0x8A, 0xE8,
    0xC0, 0xCC, 0x02, 0x0A, 0xCC, 0xB8, 0x01, 0x02, 0x80, 0x7E, 0x02, 0x0E, 0x75, 0x04, 0xB4, 0x42,
    0x8B, 0xF4, 0x8A, 0x56, 0x24, 0xCD, 0x13, 0x61, 0x61, 0x72, 0x0B, 0x40, 0x75, 0x01, 0x42, 0x03,
    0x5E, 0x0B, 0x49, 0x75, 0x06, 0xF8, 0xC3, 0x41, 0xBB, 0x00, 0x00, 0x60, 0x66, 0x6A, 0x00, 0xEB,
    0xB0, 0x42, 0x4F, 0x4F, 0x54, 0x4D, 0x47, 0x52, 0x20, 0x20, 0x20, 0x20, 0x0D, 0x0A, 0x52, 0x65,
    0x6D, 0x6F, 0x76, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6B, 0x73, 0x20, 0x6F, 0x72, 0x20, 0x6F, 0x74,
    0x68, 0x65, 0x72, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2E, 0xFF, 0x0D, 0x0A, 0x44, 0x69, 0x73,
    0x6B, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0xFF, 0x0D, 0x0A, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20,
    0x61, 0x6E, 0x79, 0x20, 0x6B, 0x65, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61,
    0x72, 0x74, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0xCB, 0xD8, 0x55, 0xAA
];

pub(crate) const MASS_STORAGE_EPADDR_IN: u8 = 0x81;
pub(crate) const MASS_STORAGE_EPADDR_OUT: u8 = 0x01;

pub fn get_descriptor_request(this: &mut CorigineUsb, value: u16, _index: usize, length: usize) {
    crate::println!(
        "ifram: {:x}, ep0_ptr: {:x}",
        this.ifram_base_ptr,
        this.ep0_buf.load(Ordering::SeqCst) as usize
    );
    let ep0_buf = unsafe {
        core::slice::from_raw_parts_mut(
            this.ep0_buf.load(Ordering::SeqCst) as *mut u8,
            CRG_UDC_EP0_REQBUFSIZE,
        )
    };

    match (value >> 8) as u8 {
        USB_DT_DEVICE => {
            crate::println!("USB_DT_DEVICE");
            let mut device_descriptor = DeviceDescriptor::default_mass_storage();
            device_descriptor.b_max_packet_size0 = 64;
            device_descriptor.b_cd_usb = 0x0210;

            let len = length.min(core::mem::size_of::<DeviceDescriptor>());
            ep0_buf[..len].copy_from_slice(&device_descriptor.as_ref()[..len]);
            crate::println!("ptr: {:x}, len: {}", this.ep0_buf.load(Ordering::SeqCst) as usize, len);
            crate::println!("dd: {:x?}", device_descriptor.as_ref());
            crate::println!("buf: {:x?}", &ep0_buf[..len]);
            this.ep0_send(this.ep0_buf.load(Ordering::SeqCst) as usize, len, 0);
        }
        USB_DT_DEVICE_QUALIFIER => {
            crate::println!("USB_DT_DEVICE_QUALIFIER");

            let qualifier_descriptor = QualifierDescriptor::default_mass_storage();
            let len = length.min(core::mem::size_of::<QualifierDescriptor>());
            ep0_buf[..len].copy_from_slice(&qualifier_descriptor.as_ref()[..len]);

            this.ep0_send(this.ep0_buf.load(Ordering::SeqCst) as usize, len, 0);
        }
        USB_DT_OTHER_SPEED_CONFIG => {
            crate::println!("USB_DT_OTHER_SPEED_CONFIG\r\n");
            crate::println!("*** UNHANDLED ***");
        }
        USB_DT_CONFIG => {
            crate::println!("USB_DT_CONFIG\r\n");
            let total_length = size_of::<ConfigDescriptor>()
                + size_of::<InterfaceDescriptor>()
                + size_of::<EndpointDescriptor>() * 2;
            let config = ConfigDescriptor::default_mass_storage(total_length as u16);
            let interface = InterfaceDescriptor::default_mass_storage();
            let ep_in = EndpointDescriptor::default_mass_storage(MASS_STORAGE_EPADDR_IN, 64);
            let ep_out = EndpointDescriptor::default_mass_storage(MASS_STORAGE_EPADDR_OUT, 64);
            let response: [&[u8]; 4] = [config.as_ref(), interface.as_ref(), ep_in.as_ref(), ep_out.as_ref()];
            let flattened = response.iter().flat_map(|slice| slice.iter().copied());
            for (dst, src) in ep0_buf.iter_mut().zip(flattened) {
                *dst = src
            }
            let buffsize = total_length.min(length);
            this.ep0_send(this.ep0_buf.load(Ordering::SeqCst) as usize, buffsize, 0);
        }
        USB_DT_STRING => {
            crate::println!("USB_DT_STRING\r\n");
            let id = (value & 0xFF) as u8;
            let len = if id == 0 {
                // index 0 is the language type. This is the hard-coded response for "English".
                ep0_buf[..4].copy_from_slice(&[4, USB_DT_STRING, 9, 4]);
                this.ep0_send(this.ep0_buf.load(Ordering::SeqCst) as usize, 4, 0);
                4
            } else {
                let s = match id {
                    1 => MANUFACTURER,
                    2 => PRODUCT,
                    _ => SERIAL,
                };
                // strings are utf16-le encoded words. Manually pack them.
                let len = 2 + s.len() * 2; // 2 bytes for header + string data
                ep0_buf[0] = len as u8;
                ep0_buf[1] = USB_DT_STRING;
                // this code fails if the string isn't simple ASCII. Yes, we could
                // embed idk unicode emoji if I coded this better, but I ask you, WHYâ€½
                for (dst, &src) in ep0_buf[2..].chunks_exact_mut(2).zip(s.as_bytes()) {
                    dst.copy_from_slice(&(src as u16).to_le_bytes());
                }
                len
            };
            let buffsize = length.min(len);
            this.ep0_send(this.ep0_buf.load(Ordering::SeqCst) as usize, buffsize, 0);
        }
        USB_DT_BOS => {
            crate::println!("USB_DT_BOS");
            crate::println!("Not supported, repsonding with stall");
            this.ep_halt(0, USB_RECV);
        }
        _ => {
            crate::println!("UNHANDLED SETUP: 0x{:x}", value >> 8);
            this.ep_halt(0, USB_RECV);
        }
    }
}

pub fn usb_ep1_bulk_out_complete(_this: &mut CorigineUsb, _buf_addr: usize, _info: u32, _error: u8) {
    crate::println!("bulk_out_complete callback TODO");
    /*
        let length = info & 0xFFFF;
        let buf = unsafe {core::slice::from_raw_parts(buf_addr as *const u8, info as usize & 0xFFFF)};
        let cbw = unsafe { core::slice::from_raw_parts_mut(this.cbw_ptr() as *mut u8, CRG_UDC_APP_BUF_LEN) };

        if unsafe{UmsState::CommandPhase == UMS_STATE} && (length == 31) { //CBW

            memcpy(cbw, buf, 31);
            if(cbw->Signature == BULK_CBW_SIG) {
                csw->Signature = BULK_CSW_SIG;
                csw->Tag = cbw->Tag;
                _process_mass_storage_command(cbw);
                invalid_cbw = 0;
            }
            else {
                crg_udc_ep_halt(1, USB_SEND);
                crg_udc_ep_halt(1, USB_RECV);
                invalid_cbw = 1;
            }
        }
        else if ((UMS_STATE_COMMAND_PHASE == ums_state) && (length != 31)) {
            crg_udc_ep_halt(1, USB_SEND);
            crg_udc_ep_halt(1, USB_RECV);
            invalid_cbw = 1;
        }
        else if(UMS_STATE_DATA_PHASE == ums_state) {  //DATA
            csw->Residue = 0;
            csw->Status = 0;

            crg_udc_bulk_xfer(1, USB_SEND, (uint8_t *)csw, 13, 0, 0);
            ums_state = UMS_STATE_STATUS_PHASE;
        }
    */
}

pub fn usb_ep1_bulk_in_complete(_this: &mut CorigineUsb, _buf_addr: usize, _info: u32, _error: u8) {
    crate::println!("bulk_in_complete callback TODO");
    /*
    uint32_t length = info & 0xFFFF;

    if(UMS_STATE_DATA_PHASE == ums_state) {  //DATA

        crg_udc_bulk_xfer(1, USB_SEND, (uint8_t *)csw, 13, 0, 0);
        ums_state = UMS_STATE_STATUS_PHASE;
    }
    else if(UMS_STATE_STATUS_PHASE == ums_state && length == 13)  //CSW
    {
        crg_udc_bulk_xfer(1, USB_RECV, (uint8_t *)cbw, 31, 0, 0);
        ums_state = UMS_STATE_COMMAND_PHASE;
    }
    */
}
